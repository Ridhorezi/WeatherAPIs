package com.weatherapi.weatherforecast.realtime;

import com.weatherapi.weatherforecast.CommonUtility;
import com.weatherapi.weatherforecast.GeolocationException;
import com.weatherapi.weatherforecast.GeolocationService;
import com.weatherapi.weatherforecast.common.Location;
import com.weatherapi.weatherforecast.common.RealtimeWeather;
import com.weatherapi.weatherforecast.location.LocationNotFoundException;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/v1/realtime")
public class RealtimeWeatherApiController {

	private static Logger LOGGER = LoggerFactory.getLogger(RealtimeWeatherApiController.class);

	private GeolocationService locationService;

	private RealtimeWeatherService realtimeWeatherService;

	private ModelMapper modelMapper;

	public RealtimeWeatherApiController(GeolocationService locationService,
			RealtimeWeatherService realtimeWeatherService, ModelMapper modelMapper) {
		super();
		this.locationService = locationService;
		this.realtimeWeatherService = realtimeWeatherService;
		this.modelMapper = modelMapper;
	}

	@GetMapping
	public ResponseEntity<?> getRealtimeWeatherByIPAddress(HttpServletRequest request) {

		String ipAddress = CommonUtility.getIPAddress(request);

		try {

			Location locationFromIP = locationService.getLocation(ipAddress);

			RealtimeWeather realtimeWeather = realtimeWeatherService.getByLocation(locationFromIP);

			RealtimeWeatherDTO dto = modelMapper.map(realtimeWeather, RealtimeWeatherDTO.class);

			return ResponseEntity.ok(dto);

		} catch (GeolocationException ex) {

			LOGGER.error(ex.getMessage(), ex);

			return ResponseEntity.badRequest().build();

		} catch (LocationNotFoundException ex) {

			LOGGER.error(ex.getMessage(), ex);

			return ResponseEntity.notFound().build();
		}
	}

	@GetMapping("/{locationCode}")
	public ResponseEntity<?> getRealtimeWeatherByLocationCode(@PathVariable("locationCode") String locationCode) {

		try {

			RealtimeWeather realtimeWeather = realtimeWeatherService.getByLocationCode(locationCode);

			return ResponseEntity.ok(entity2DTO(realtimeWeather));

		} catch (LocationNotFoundException ex) {

			LOGGER.error(ex.getMessage(), ex);

			return ResponseEntity.notFound().build();
		}
	}

	@PutMapping("/{locationCode}")
	public ResponseEntity<?> updateRealtimeWeather(@PathVariable("locationCode") String locationCode,
			@RequestBody @Valid RealtimeWeather realtimeWeatherInRequest) {

		try {

			RealtimeWeather updatedRealtimeWeather = realtimeWeatherService.update(locationCode,
					realtimeWeatherInRequest);

			return ResponseEntity.ok(entity2DTO(updatedRealtimeWeather));

		} catch (LocationNotFoundException ex) {

			LOGGER.error(ex.getMessage(), ex);

			return ResponseEntity.notFound().build();
		}
	}

	private RealtimeWeatherDTO entity2DTO(RealtimeWeather realtimeWeather) {

		return modelMapper.map(realtimeWeather, RealtimeWeatherDTO.class);
	}
}
